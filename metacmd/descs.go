package metacmd

// Code generated by gen.go. DO NOT EDIT.

import (
	"github.com/xo/usql/text"
)

// sections are the command description sections.
var sections = []string{
	"General",
	"Help",
	"Query Execute",
	"Query Buffer",
	"Informational",
	"Variables",
	"Connection",
	"Conditional",
	"Input/Output",
	"Transaction",
	"Operating System/Environment",
}

// descs are the command descriptions.
var descs [][]desc

// cmds are the command lookup map.
var cmds map[string]func(*Params) error

func init() {
	descs = [][]desc{
		// General
		{
			{"q", "", "quit " + text.CommandName + "", Quit, false},
			{"quit", "", "alias for \\q", Quit, true},
			{"copyright", "", "show " + text.CommandName + " usage and distribution terms", Copyright, false},
			{"drivers", "", "display information about available database drivers", Drivers, false},
		},
		// Help
		{
			{"?", "[commands]", "show help on meta (backslash) commands", Question, false},
			{"?", "options", "show help on " + text.CommandName + " command-line options", Question, false},
			{"?", "variables", "show help on special " + text.CommandName + " variables", Question, false},
		},
		// Query Execute
		{
			{"g", "[(OPTIONS)] [FILE] or ;", "execute query (and send results to file or |pipe)", Execute, false},
			{"go", "[(OPTIONS)] [FILE]", "alias for \\g", Execute, false},
			{"G", "[(OPTIONS)] [FILE]", "as \\g, but forces vertical output mode", Execute, false},
			{"ego", "[(OPTIONS)] [FILE]", "alias for \\G", Execute, false},
			{"gx", "[(OPTIONS)] [FILE]", "as \\g, but forces expanded output mode", Execute, false},
			{"gexec", "", "execute query and execute each value of the result", Execute, false},
			{"gset", "[PREFIX]", "execute query and store results in " + text.CommandName + " variables", Execute, false},
			{"crosstabview", "[(OPTIONS)] [COLUMNS]", "execute query and display results in crosstab", Execute, false},
			{"chart", "CHART [(OPTIONS)]", "execute query and display results as a chart", Execute, false},
			{"watch", "[(OPTIONS)] [DURATION]", "execute query every specified interval", Execute, false},
			{"bind", "[PARAM]...", "set query parameters", Bind, false},
		},
		// Query Buffer
		{
			{"e", "[FILE] [LINE]", "edit the query buffer (or file) with external editor", Edit, false},
			{"edit", "[-exec]", "edit the query (or exec) buffer", Edit, false},
			{"p", "", "show the contents of the query buffer", Print, false},
			{"print", "", "alias for \\p", Print, true},
			{"raw", "", "show the raw (non-interpolated) contents of the query buffer", Print, false},
			{"exec", "", "show the contents of the exec buffer", Print, false},
			{"r", "", "reset (clear) the query buffer", Reset, false},
			{"reset", "", "alias for \\r", Reset, true},
			{"w", "FILE", "write query buffer to file", Write, false},
			{"write", "", "alias for \\w", Write, true},
		},
		// Informational
		{
			{"d[S+]", "[NAME]", "list tables, views, and sequences or describe table, view, sequence, or index", Describe, false},
			{"da[S+]", "[PATTERN]", "list aggregates", Describe, false},
			{"df[S+]", "[PATTERN]", "list functions", Describe, false},
			{"di[S+]", "[PATTERN]", "list indexes", Describe, false},
			{"dm[S+]", "[PATTERN]", "list materialized views", Describe, false},
			{"dn[S+]", "[PATTERN]", "list schemas", Describe, false},
			{"dp[S]", "[PATTERN]", "list table, view, and sequence access privileges", Describe, false},
			{"ds[S+]", "[PATTERN]", "list sequences", Describe, false},
			{"dt[S+]", "[PATTERN]", "list tables", Describe, false},
			{"dv[S+]", "[PATTERN]", "list views", Describe, false},
			{"l[+]", "", "list databases", Describe, false},
			{"ss[+]", "[TABLE|QUERY] [k]", "show stats for a table or a query", Stats, false},
		},
		// Variables
		{
			{"prompt", "[-TYPE] VAR [PROMPT]", "prompt user to set variable", Prompt, false},
			{"set", "[NAME [VALUE]]", "set internal variable, or list all if no parameters", Set, false},
			{"unset", "NAME", "unset (delete) internal variable", Unset, false},
			{"pset", "[NAME [VALUE]]", "set table output option", SetPrint, false},
			{"a", "", "toggle between unaligned and aligned output mode", SetPrint, false},
			{"C", "[TITLE]", "set table title, or unset if none", SetPrint, false},
			{"f", "[SEPARATOR]", "show or set field separator for unaligned query output", SetPrint, false},
			{"H", "", "toggle HTML output mode", SetPrint, false},
			{"T", "[ATTRIBUTES]", "set HTML <table> tag attributes, or unset if none", SetPrint, false},
			{"t", "[on|off]", "show only rows", SetPrint, false},
			{"x", "[on|off|auto]", "toggle expanded output", SetPrint, false},
		},
		// Connection
		{
			{"c", "URL", "connect to database URL", Connect, false},
			{"c", "DRIVER PARAMS...", "connect to database with driver and parameters", Connect, false},
			{"connect", "", "alias for \\c", Connect, true},
			{"cset", "", "show named connections", SetConn, false},
			{"cset", "NAME URL", "set named connection to URL", SetConn, false},
			{"cset", "NAME DRIVER PARAMS...", "set named connection for database driver and parameters", SetConn, false},
			{"Z", "", "close database connection", Disconnect, false},
			{"disconnect", "", "alias for \\Z", Disconnect, true},
			{"password", "[USER]", "change password for user", Password, false},
			{"passwd", "", "alias for \\password", Password, true},
			{"conninfo", "", "display information about the current database connection", ConnectionInfo, false},
		},
		// Conditional
		{
			{"if", "EXPR", "begin conditional block", Conditional, false},
			{"elif", "EXPR", "alternative within current conditional block", Conditional, false},
			{"else", "", "final alternative within current conditional block", Conditional, false},
			{"endif", "", "end conditional block", Conditional, false},
		},
		// Input/Output
		{
			{"copy", "SRC DST QUERY TABLE", "copy query from source url to table on destination url", Copy, false},
			{"copy", "SRC DST QUERY TABLE(A,...)", "copy query from source url to columns of table on destination url", Copy, false},
			{"echo", "[-n] [MESSAGE]...", "write message to standard output (-n for no newline)", Echo, false},
			{"qecho", "[-n] [MESSAGE]...", "write message to \\o output stream (-n for no newline)", Echo, false},
			{"warn", "[-n] [MESSAGE]...", "write message to standard error (-n for no newline)", Echo, false},
			{"o", "[FILE]", "send all query results to file or |pipe", Out, false},
			{"out", "", "alias for \\o", Out, true},
			{"i", "FILE", "execute commands from file", Include, false},
			{"include", "", "alias for \\i", Include, true},
			{"ir", "FILE", "as \\i, but relative to location of current script", Include, false},
			{"include_relative", "", "alias for \\ir", Include, true},
		},
		// Transaction
		{
			{"begin", "", "begin a transaction", Transact, false},
			{"begin", "-read-only ISOLATION", "begin a transaction with isolation level", Transact, false},
			{"commit", "", "commit current transaction", Transact, false},
			{"rollback", "", "rollback (abort) current transaction", Transact, false},
			{"abort", "", "alias for \\rollback", Transact, true},
		},
		// Operating System/Environment
		{
			{"cd", "[DIR]", "change the current working directory", Chdir, false},
			{"getenv", "VARNAME ENVVAR", "fetch environment variable", Getenv, false},
			{"setenv", "NAME [VALUE]", "set or unset environment variable", Setenv, false},
			{"!", "[COMMAND]", "execute command in shell or start interactive shell", Shell, false},
			{"timing", "[on|off]", "toggle timing of commands", Timing, false},
		},
	}
	cmds = make(map[string]func(*Params) error)
	for i := range sections {
		for _, desc := range descs[i] {
			for _, n := range desc.Names() {
				cmds[n] = desc.Func
			}
		}
	}
}
